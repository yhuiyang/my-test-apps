#include <wx/wx.h>
#include "SimCubeApp.h"
#include "NetAdapter.h"
#include "TCPProtocol.h"

BEGIN_EVENT_TABLE(TCPProtocol, wxEvtHandler)
    EVT_SOCKET(wxID_ANY, TCPProtocol::OnSocketEvent)
END_EVENT_TABLE()

TCPProtocol::TCPProtocol()
{
    size_t socketId = 0;
    wxIPV4address local;

    /* create socket per app network adapter detect result. */
    wxVector<NetAdapter> &netAdapter = wxGetApp().m_Adapters;
    for (wxVector<NetAdapter>::iterator it = netAdapter.begin();
        it != netAdapter.end();
        it++, socketId++)
    {
        local.Hostname(it->GetIp());
        local.Service(40000);
        it->tcp = new wxSocketServer(local, wxSOCKET_NOWAIT|wxSOCKET_REUSEADDR);
        it->tcp->SetEventHandler(*this, socketId);
        it->tcp->SetNotify(wxSOCKET_CONNECTION_FLAG);
        it->tcp->Notify(true);
        if (!it->tcp->Ok())
            wxLogError(_("Fail to bind %s:%d to tcp socket"), local.IPAddress(), local.Service());
    }
}

TCPProtocol::~TCPProtocol()
{
    wxVector<NetAdapter> &netAdapter = wxGetApp().m_Adapters;
    for (wxVector<NetAdapter>::iterator it = netAdapter.begin();
        it != netAdapter.end();
        it++)
    {
        if (it->tcp)
        {
            it->tcp->Notify(false);
            it->tcp->Destroy();
        }
    }
}

//
// This socket event handler will process all event generated by
// the server (listening) sockets (per net adapter) and new create
// (after accept) socket.
// If the event.GetId() < netAdapter.size() => service sockets
// else => new create sockets
//
void TCPProtocol::OnSocketEvent(wxSocketEvent &event)
{
    wxIPV4address remote;
    size_t id = event.GetId();
    wxVector<NetAdapter> &netAdapter = wxGetApp().m_Adapters;
    wxSocketNotify notify = event.GetSocketEvent();

    if (id < netAdapter.size())
    {
        wxSocketServer *tcpSocket = netAdapter.at(id).tcp;

        switch (notify)
        {
        default:
        case wxSOCKET_INPUT:
        case wxSOCKET_OUTPUT:
        case wxSOCKET_LOST:
            wxLogError(_("Unexpect event (%d) received in server socket!"), notify);
            break;
        case wxSOCKET_CONNECTION:
            wxSocketBase *sock = tcpSocket->Accept(false);
            if (sock)
            {
                if (sock->GetPeer(remote))
                {
                    wxLogMessage(_("New client connection from %s:%d accepted."),
                        remote.IPAddress(), remote.Service());
                }
                else
                    wxLogMessage(_("New connection from unknown client accepted."));
            }
            else
            {
                wxLogError(_("Fail to accept new connection!"));
                return;
            }
            sock->SetEventHandler(*this, netAdapter.size());
            sock->SetNotify(wxSOCKET_INPUT_FLAG | wxSOCKET_LOST_FLAG);
            sock->Notify(true);
            break;
        }
    }
    else
    {
        wxSocketBase *tcpSocket = event.GetSocket();
        unsigned char *rxBuf = new unsigned char[1024 * 1024];

        switch (notify)
        {
        case wxSOCKET_INPUT:
            tcpSocket->Read(rxBuf, 16);
            break;
        case wxSOCKET_LOST:
            break;
        default:
            break;
        }

        delete [] rxBuf;
    }
}


// ------------------------------------------------------------------------
// Headers
// ------------------------------------------------------------------------
#include <wx/wx.h>
#include <wx/notebook.h>
#include "UpdaterApp.h"
#include "AppPreferencePane.h"

// ------------------------------------------------------------------------
// Resources
// ------------------------------------------------------------------------

// ------------------------------------------------------------------------
// Declaration
// ------------------------------------------------------------------------

// ------------------------------------------------------------------------
// Implementation
// ------------------------------------------------------------------------
AppPreferencePane::AppPreferencePane()
{
    Init();
}

AppPreferencePane::AppPreferencePane(wxWindow *parent, wxWindowID id,
                                     const wxPoint &pos, const wxSize &size,
                                     long style)
{
    Init();
    Create(parent, id, pos, size, style);
}

AppPreferencePane::~AppPreferencePane()
{

}

void AppPreferencePane::Init()
{

}

bool AppPreferencePane::Create(wxWindow *parent, wxWindowID id,
                               const wxPoint &pos, const wxSize &size,
                               long style)
{
    wxPanel::Create(parent, id, pos, size, style);
    CreateControls();
    Center();
    return true;
}

void AppPreferencePane::CreateControls()
{
    wxNotebook *prefNB = new wxNotebook(this, wxID_ANY);

    //
    // network page
    //
    wxPanel *networkPage = new wxPanel(prefNB, wxID_ANY);
    wxStaticBoxSizer *actIfSizer = new wxStaticBoxSizer(wxVERTICAL, networkPage, _("Actived Interface"));
    actIfSizer->Add(new wxStaticText(networkPage, wxID_STATIC, _("Please choose an active interface from system valid interfaces:")), 0, wxALL, 5);
    wxVector<NetAdapter> &adapters = wxGetApp().m_Adapters;
    wxArrayString ifArrayStr;
    wxString ifStr, activedStr = wxGetApp().m_pAppOptions->GetOption(wxT("ActivedInterface"));
    wxVector<NetAdapter>::iterator it;
    for (it = adapters.begin(); it != adapters.end(); ++it)
    {
        ifStr.clear();
        ifStr << wxT("IP: [") << it->GetIp() << wxT("] Name: [") << it->GetName() << wxT("]");
        ifArrayStr.push_back(ifStr);

        if (ifStr.Contains(activedStr))
            activedStr = ifStr;
    }
    wxChoice *ifChoice = new wxChoice(networkPage, wxID_ANY, wxDefaultPosition, wxDefaultSize, ifArrayStr);
    ifChoice->SetStringSelection(activedStr);
    ifChoice->Bind(wxEVT_COMMAND_CHOICE_SELECTED, &AppPreferencePane::OnUpdateActivedInterface, this);
    actIfSizer->Add(ifChoice, 0, wxLEFT | wxRIGHT | wxBOTTOM | wxEXPAND, 5);
    wxCheckBox *skipVMif = new wxCheckBox(networkPage, wxID_ANY, _("Skip interfaces generated by VMware. (Need restart application)"));
    if (!wxGetApp().m_pAppOptions->GetOption(wxT("SkipVMInterface")).Cmp(wxT("Yes")))
        skipVMif->SetValue(true);
    skipVMif->Bind(wxEVT_COMMAND_CHECKBOX_CLICKED, &AppPreferencePane::OnUpdateSkipVMInterface, this);
    actIfSizer->Add(skipVMif, 0, wxALL | wxEXPAND, 5);

    wxBoxSizer *netSizer = new wxBoxSizer(wxVERTICAL);
    netSizer->Add(actIfSizer, 0, wxALL | wxEXPAND, 5);
    networkPage->SetSizer(netSizer);

    //
    // MAC address page
    //
    wxPanel *macPage = new wxPanel(prefNB, wxID_ANY);

    prefNB->AddPage(networkPage, _("Network"), true);
    prefNB->AddPage(macPage, _("MAC Address"), false);

    wxBoxSizer *paneSizer = new wxBoxSizer(wxVERTICAL);
    paneSizer->Add(prefNB, 1, wxALL | wxEXPAND, 5);
    SetSizer(paneSizer);
}

// event handlers
void AppPreferencePane::OnUpdateActivedInterface(wxCommandEvent &event)
{
    wxString ifChoiceString = event.GetString();
    size_t ifNamePosStart = ifChoiceString.Find(wxT("Name: ["));
    if (ifNamePosStart != wxNOT_FOUND)
    {
        /* length calculate is based on when we formated the string in the wxChoice */
        size_t ifNameLen = (ifChoiceString.length() - 1) - (ifNamePosStart + 7);
        wxString ifNameString = ifChoiceString.Mid(ifNamePosStart + 7, ifNameLen);
        wxGetApp().m_pAppOptions->SetOption(wxT("ActivedInterface"), ifNameString);
    }
}

void AppPreferencePane::OnUpdateSkipVMInterface(wxCommandEvent &event)
{
    wxGetApp().m_pAppOptions->SetOption(wxT("SkipVMInterface"), event.IsChecked() ? wxT("Yes") : wxT("No"));
}
